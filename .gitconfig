[alias]
	# git aliases
	aliases = config --get-regexp alias
	# git a
	a = aliases

	# git whoami
	whoami = config user.email

	# git c kosalanuwan/dotfiles
	c = ! sh -c \"gh c $1\"

	# git s
	s = ! git branch && git status -s
	# git l
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# git p
	p = pull --recurse-submodules
	# git pf main/feature
	pf = ! sh -c \"git reset --hard origin/$1\"

	# git p-fork
	p-fork = ! sh -c \"git fetch --recurse-submodules upstream && git checkout main -f && git pull --ff upstream main\"
	# git pf-fork
	pf-fork = ! sh -c \"git checkout main -f && git reset --hard upstream/main\"

	# git ps
	ps = push
	# git psf feature
	# psf = ! sh -c \"git push --force origin $1\"
	psf = push --force origin

	# git sy
	sy = ! sh -c \"git p && git ps\"
	# git syf main
	syf = ! sh -c \"git pf $1 && git psf $1\"

	# git sy-fork main
	sy-fork = ! sh -c \"git p-fork && git ps\"
	# git syf-fork main
	syf-fork = ! sh -c \"git pf-fork && git psf main\"

	# git undo
	undo = ! git fetch origin main && git reset --hard FETCH_HEAD && git clean -fd

	# Show verbose output about tags, branches or remotes.
	# git tags
	tags = tag -l
	t = tags
	# git branches
	branches = branch --all
	br = branch
	# git remotes
	remotes = remote --verbose
	r = remote

	# git this
	this = ! sh -c \"git init && git add -A && git commit -m 'chore: initial commit'\"
	# git publish
	ps-this = ! sh -c \"gh this $1\"

	# git purge : Remove all branches except `main` branch.
	purge = ! git branch | grep -v 'main' | xargs git branch -D
	# git trash : Move all untracked stuff to `.trash` folder.
	# FIXME: `mv: illegal option -- t`
	# trash = ! mkdir -p .trash && git ls-files --others --exclude-standard | xargs mv -f -t .trash

[user]
	email = kosala.nuwan@gmail.com
	name = kosalanuwan

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[branch]

	# Show most recently changed branches first.
	sort = -committerdate

[core]
	excludesfile = ~/.gitignore

	# Let the `$EDITOR` decides that.
	# editor = code --wait

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	
[init]
	defaultBranch = main

[safe]
	directory = *

[help]

	# Automatically correct and execute mistyped commands.
	autocorrect = 1

[fetch]
	# Get rid of dead branches
	# Let `git purge` decide that.
	# prune = true

[pull]
	rebase = false

[status]
  showUntrackedFiles = all